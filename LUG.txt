		//CREAMOS LA APP EXPRESS//

1. Para comenzar el backend y crear el json package utilizamos *npm init -y*

2. para instalar express, typescript y mongoose utilizamos *npm i express express-handlebars typescript mongoose*

*express es un framework de nodejs que sirve para comunicarse con el servidor, mongoose es un modulo de conexión.*

3. Creamos una carpeta *src* donde guardaremos todo el código fuente del proyecto.

4. dentro de src crearemos un index.ts o server.ts donde estará el código de arranque del servidor.

5. Crear las carpetas:

//routes: en esta carpeta se guardarán las rutas.

//models: guardaremos los modelos de la base de datos.

//controllers: aquí se guardarán las funciones que se invoquen desde la aplicación cliente, como ejemplo Agregar un producto al carrito.

//lib: se guardarán los códigos para compartir y ser reutilizados.

//views: donde se guardarán archivos HTML para el frontend.

6. creamos un archivo database.ts creado unicamente para guardar la base de datos y otro archivo donde podemos guardar nuestras contraseñas *keys.ts* (opcional) sólo para servicios de correo y contraseña.

7. Ahora, para trabajar en typescript debemos especificarle que trabajaremos en el lado de servidor, por lo tanto primero instalamos typescript: *npm i -g typescript*

8. para configurar el comportamiento de typescript según lo que deseemos utilizar tenemos que poner el comando *typescript --init*

9. En tsconfig.json buscamos "outDir", descomentamos y ponemos la dirección "./build/src" esto es para que guarde todo el código convertido a javascript en una carpeta build dentro de una carpeta src. 

también descomentamos "moduleresolution" para traducir node.

luego debajo de "compilerOptios"[], " le agregamos una coma y ponemos lo siguiente: 

"include":[
    "./src/**/*"
  ],
  "exclude":[
    "node_modules"
  ]
esto es para que incluya en la traducción todo lo que sea typescript en src y todo lo demas, también para que excluya node_modules.

///// Comienzo de programación con TYPESCRIPT Backend///

1. Nos dirigimos a index.ts y escribimos el siguiente comando npm i @types/express -D esto nos ayudará en el auto completado del código.

2. podemos instalarle los siguientes comando a nuestro json: 

"scripts": {
    "ts:node": "ts-node src/index.ts" 
    "clean": "rm -rf build",
    "build": "tsc",
    "start": "node build/src"
  },

el primer comando ts:node sirve para ejecutar sin traducirlo. antes de eso tenemos que instalar como dependencia a typescript -> npm i typescript -D
y también npm i ts-node -D

para ejecutar los comandos ponemos npm run *el_comando*

//NODEMON
3. instalamos el framework nodemon, este sirve cada vez que hagamos un cambio al código, reinicie el servidor e inserte lo nuevo.

npm i nodemon -D

podemos configurar nodemon creando un json -> nodemon.json al cual le pondremos que vigile los cambios de la carpeta source ->

{
    "watch": [
        "src"
    ],
    "ext": "ts",
    "ingore": [
        "src/**/*.spec.ts"
    ],
    "exec": "ts-node ./src/index.ts"
}

una vez configurado nodemon, vamos a package.json y ponemos en script el siguiente comando

"dev": "nodemon"

y ya con esto tendremos nodemon y cada vez que terminemos el código se refrescará.

